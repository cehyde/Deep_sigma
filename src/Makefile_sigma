#! gnumake
#
# declare some variables
#
#LD      = g++ -v
#LD      = gcc -v
LD      =clang -v -std=c++11 -stdlib=libc++
#CC      = gcc -v
CC      =clang -v -std=c++11 -stdlib=libc++

#CFLAGS = $(shell root-config --cflags)
#LIBS   = $(shell root-config --libs)
GLIBS  = $(shell $(ROOTSYS)/bin/root-config --glibs)

FLAGS   = -O2 -Wall
INCLUDE = -I ./   -I $(shell $(ROOTSYS)/bin/root-config --incdir)
#/ -I$(ROOTSYS)/include
#LIBS    =  $(shell $(ROOTSYS)/bin/root-config --libs) -lCore  -lMathCore -lGraf -lGraf3d -lTree
LIBS    =  $(shell $(ROOTSYS)/bin/root-config --libdir) -lCore  -lMathCore -lGraf -lGraf3d -lTree
SOURCES = $(wildcard *.cxx)
EXES    = $(addprefix ../bin/,$(basename $(SOURCES)))
DEPENDS = $(addprefix depends/,$(SOURCES:.cxx=.d))
#
# commands
#
.PHONY: all clean
all: exes
#
# general pattern to write dependency files
#
depends/%.d: %.cxx
	@echo "Generating dependencies for $*.C ..."
	$(SHELL) -ec '$(CC) -MM $(FLAGS) $(INCLUDE) $< | ../src/depends.pl $@'
	@echo "done."
#
# general pattern to build objects from source files 
#
objects/%.o: %.cxx
	@echo "Building $*.o ..."
	$(LD) $(FLAGS) $(INCLUDE) -c -o objects/$*.o $*.cxx
	@echo "done."
#
# general pattern to build executables from object files
#
../bin/%: objects/%.o
	@echo "Linking $* ..."
	$(LD) $(FLAGS) objects/$*.o $(LIBS) $(GLIBS) -o ../bin/$*
	@echo "done."
#
# build the executables
# 
include $(DEPENDS)
exes: $(EXES)
#
# rule for 'cleaning'
#
clean:
	@rm -f bin/*
	@rm -f depends/*.d
	@rm -f objects/*.o
#
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
